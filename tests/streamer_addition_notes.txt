To match values that are at least 95% similar, you can use the difflib library, which provides functions for comparing sequences.

Here is an example of how you could use the difflib.SequenceMatcher.ratio() method to find the similarity ratio between two strings:

Copy code
import difflib

s1 = "Bundle"
s2 = "bundles"
ratio = difflib.SequenceMatcher(None, s1, s2).ratio()
print(ratio)  # Output: 0.8571428571428571
You can then use this ratio to determine if the strings are similar enough. For example:

Copy code
import difflib

def are_similar(s1, s2, threshold=0.95):
    ratio = difflib.SequenceMatcher(None, s1, s2).ratio()
    return ratio >= threshold

s1 = "Bundle"
s2 = "bundles"
if are_similar(s1, s2):
    print("The strings are similar.")
else:
    print("The strings are not similar.")
To apply this to the lists filtered_schema and filtered_query, you can use a similar approach as before, but instead of checking for exact matches, you can use the are_similar() function to check the similarity of the strings. Here is some example code that demonstrates how to do this:

Copy code
import difflib

def are_similar(s1, s2, threshold=0.95):
    ratio = difflib.SequenceMatcher(None, s1, s2).ratio()
    return ratio >= threshold

filtered_schema = [s.lower() for s in filtered_schema]
filtered_query = [s.lower() for s in filtered_query]

matches = []
for s, q in zip(filtered_schema, filtered_query):
    if are_similar(s, q):
        matches.append((s, q))
This will give you a list of tuples containing strings from the filtered_schema list and the filtered_query list that are at least 95% similar. You can adjust the threshold by changing the value of the threshold parameter in the are_similar() function.